{"ast":null,"code":"import { BaseService } from '../base-service';\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n      this.apiKey = '0d0d0ae1d3a74fdf98612af8f99f231c';\n    }\n    getCoordinates(cityName) {\n      const url = `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(cityName)}&key=${this.apiKey}`;\n      return this.http.get(url).pipe(map(response => {\n        const results = response.results[0];\n        return {\n          lat: results.geometry.lat,\n          lng: results.geometry.lng\n        };\n      }));\n    }\n    getCities(departureCity, arrivalCity) {\n      const rb = new RequestBuilder(this.rootUrl, MapService.MapPath + '/' + departureCity + '&' + arrivalCity, 'get');\n      rb.body(null, 'application/json');\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'application/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.body;\n      }));\n    }\n    getOptimalRoute(departureCity, arrivalCity) {\n      const rb = new RequestBuilder(this.rootUrl, MapService.MapPath + '/' + departureCity + '&' + arrivalCity, 'get');\n      rb.body(null, 'application/json');\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'application/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.body;\n      }));\n    }\n  }\n  MapService.MapPath = '/api/Map';\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module"}