{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../auth/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./../api/services/passenger.service\";\nimport * as i5 from \"../notification/notification.component\";\nimport * as i6 from \"@angular/common\";\nfunction LoginPassengerComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Email is invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginPassengerComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginPassengerComponent_div_8_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.form.controls.email.errors);\n  }\n}\nfunction LoginPassengerComponent_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password is invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginPassengerComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginPassengerComponent_div_15_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.controls.password.errors);\n  }\n}\nfunction LoginPassengerComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.errorMessage);\n  }\n}\nexport let LoginPassengerComponent = /*#__PURE__*/(() => {\n  class LoginPassengerComponent {\n    constructor(fb, authService, router, activatedRoute, passengerService) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.passengerService = passengerService;\n      this.errorMessage = null;\n      this.showPassword = false;\n      this.notificationMessage = '';\n      this.notificationType = 'info';\n      this.requestedUrl = undefined;\n      this.form = this.fb.group({\n        email: ['', Validators.compose([Validators.required, Validators.email])],\n        password: ['', Validators.compose([Validators.required, Validators.minLength(5), Validators.maxLength(25)])]\n      });\n    }\n    ngOnInit() {\n      this.activatedRoute.queryParams.subscribe(params => {\n        if (params['message']) {\n          this.notificationMessage = params['message']; // Set message if available\n          this.notificationType = 'success';\n          // Hide the message after 5 seconds\n          setTimeout(() => {\n            this.notificationMessage = ''; // Set to empty string instead of null\n          }, 5000);\n        }\n      });\n      sessionStorage.removeItem(\"SeasonName\");\n      this.activatedRoute.params.subscribe(p => this.requestedUrl = p['requestedUrl']);\n    }\n    login() {\n      if (this.form.invalid) return;\n      const {\n        email,\n        password\n      } = this.form.value;\n      this.passengerService.loginPassenger(email, password).subscribe(user => {\n        this.errorMessage = null;\n        this.loginUser(user);\n      }, error => {\n        if (error.status === 404) {\n          this.errorMessage = 'Invalid email or password.';\n        } else if (error.status === 401) {\n          // Handle the case where the user is not verified\n          this.errorMessage = error.error.message || 'Please verify your email before logging in.';\n        } else {\n          this.errorMessage = 'An error occurred. Please try again later.';\n        }\n        console.error(error);\n      });\n    }\n    loginUser(responseUser) {\n      var _a;\n      const {\n        email,\n        password\n      } = this.form.value;\n      const user = {\n        email,\n        password,\n        username: responseUser.userName,\n        packetid: responseUser.packetId,\n        purchasepercent: responseUser.purchasePercent,\n        cancelpercent: responseUser.cancelPercent\n      };\n      this.authService.loginUser(user);\n      this.router.navigate([(_a = this.requestedUrl) !== null && _a !== void 0 ? _a : '/search-flights']);\n    }\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    }\n  }\n  LoginPassengerComponent.ɵfac = function LoginPassengerComponent_Factory(t) {\n    return new (t || LoginPassengerComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.PassengerService));\n  };\n  LoginPassengerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginPassengerComponent,\n    selectors: [[\"app-login-passenger\"]],\n    decls: 21,\n    vars: 11,\n    consts: [[3, \"message\", \"type\"], [3, \"formGroup\"], [1, \"container\", \"d-grid\", \"gap-3\", 2, \"max-width\", \"700px\"], [1, \"form-floating\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\", \"type\", \"email\", 1, \"form-control\"], [\"for\", \"email\"], [\"class\", \"invalid-feedback d-block\", 4, \"ngIf\"], [1, \"input-group\"], [\"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\", 3, \"type\"], [\"for\", \"password\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", \"input-group-text\", 2, \"margin-left\", \"-42px\", \"z-index\", \"2\", \"border\", \"none\", \"position\", \"absolute\", 3, \"click\"], [1, \"fa\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\", \"center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-sign-in\"], [1, \"invalid-feedback\", \"d-block\"], [4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n    template: function LoginPassengerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"head\")(1, \"app-notification\", 0);\n        i0.ɵɵelementStart(2, \"form\", 1)(3, \"div\", 2)(4, \"div\", 3);\n        i0.ɵɵelement(5, \"input\", 4);\n        i0.ɵɵelementStart(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, LoginPassengerComponent_div_8_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"div\", 7);\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵelementStart(12, \"label\", 9)(13, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function LoginPassengerComponent_Template_button_click_13_listener() {\n          return ctx.togglePasswordVisibility();\n        });\n        i0.ɵɵelement(14, \"i\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(15, LoginPassengerComponent_div_15_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, LoginPassengerComponent_div_16_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementStart(17, \"div\", 13)(18, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function LoginPassengerComponent_Template_button_click_18_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(19, \"Login \");\n        i0.ɵɵelement(20, \"i\", 15);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"message\", ctx.notificationMessage)(\"type\", ctx.notificationType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.controls.email.invalid && (ctx.form.controls.email.dirty || ctx.form.controls.email.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"type\", ctx.showPassword ? \"text\" : \"password\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"fa-eye\", !ctx.showPassword)(\"fa-eye-slash\", ctx.showPassword);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.controls.password.invalid && (ctx.form.controls.password.dirty || ctx.form.controls.password.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      }\n    },\n    directives: [i5.NotificationComponent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i6.NgIf],\n    styles: [\"\"]\n  });\n  return LoginPassengerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}