{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services/map.service\";\nimport * as i2 from \"@angular/common\";\nfunction MapComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Total Price: $\", ctx_r0.totalPrice, \" \");\n  }\n}\nconst DefaultIcon = L.icon({\n  //iconUrl: 'http://localhost:44492/marker-icon.png',\n  //iconUrl: 'https://4.210.213.185:80/marker-icon.png',\n  iconUrl: 'https://skyc0nnect.com/marker-icon.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  tooltipAnchor: [16, -28],\n  shadowSize: [41, 41]\n});\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(mapService) {\n      this.mapService = mapService;\n      this.cities = [];\n      this.planes = L.featureGroup();\n      this.markers = [];\n      this.polylines = [];\n      this.totalPrice = 0;\n    }\n    ngOnInit() {\n      document.body.classList.add('map-active');\n      this.getCities(this.departureCity, this.arrivalCity);\n      this.initializeMap();\n    }\n    ngAfterViewInit() {}\n    ngOnDestroy() {\n      document.body.classList.remove('map-active');\n    }\n    getCities(departureCity, arrivalCity) {\n      this.mapService.getCities(departureCity, arrivalCity).subscribe(data => {\n        this.cities = data;\n        this.totalPrice = 0;\n        if (this.map) {\n          this.addMarkers();\n        }\n      }, error => {\n        console.error('Error fetching cities:', error);\n      });\n    }\n    getOptimalRoute(departureCity, arrivalCity) {\n      this.mapService.getOptimalRoute(departureCity, arrivalCity).subscribe(data => {\n        this.cities = data;\n        this.calculateTotalPrice();\n        if (this.map) {\n          this.addMarkers();\n        }\n      }, error => {\n        console.error('Error fetching optimal route:', error);\n      });\n    }\n    onCleanSearchClick() {\n      this.departureCity = undefined;\n      this.arrivalCity = undefined;\n      this.getCities(this.departureCity, this.arrivalCity);\n    }\n    onSearchClick() {\n      this.departureCity = document.getElementById('departureCity').value;\n      this.arrivalCity = document.getElementById('arrivalCity').value;\n      this.getOptimalRoute(this.departureCity, this.arrivalCity);\n    }\n    calculateTotalPrice() {\n      this.totalPrice = this.cities.reduce((acc, city) => acc + city.price, 0);\n    }\n    initializeMap() {\n      this.map = L.map('map').setView([45, 20], 4.5);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 18,\n        attribution: '© SkyConnect Map'\n      }).addTo(this.map);\n      L.Marker.prototype.options.icon = DefaultIcon;\n      this.planes.addTo(this.map);\n      if (this.cities.length > 0) {\n        this.addMarkers();\n      }\n    }\n    addMarkers() {\n      if (!this.map) return;\n      this.markers.forEach(marker => marker.remove());\n      this.polylines.forEach(polyline => polyline.remove());\n      this.planes.clearLayers();\n      this.markers = [];\n      this.polylines = [];\n      this.cities.forEach(city => {\n        this.mapService.getCoordinates(city.departure).subscribe(departureCoords => {\n          const departureMarker = L.marker([departureCoords.lat, departureCoords.lng]).addTo(this.map).bindPopup(`<b>${city.departure}</b><br>Departure City`);\n          this.markers.push(departureMarker);\n          this.mapService.getCoordinates(city.arrival).subscribe(arrivalCoords => {\n            const arrivalMarker = L.marker([arrivalCoords.lat, arrivalCoords.lng]).addTo(this.map).bindPopup(`<b>${city.arrival}</b><br>Arrival City`);\n            this.markers.push(arrivalMarker);\n            const polyline = L.polyline([[departureCoords.lat, departureCoords.lng], [arrivalCoords.lat, arrivalCoords.lng]], {\n              color: '#2980b9',\n              weight: 3,\n              opacity: 0.7\n            }).addTo(this.map);\n            this.polylines.push(polyline);\n            const planeIcon = L.divIcon({\n              className: 'plane-icon',\n              html: '<i class=\"fa-solid fa-circle\"></i>',\n              iconSize: [30, 30],\n              iconAnchor: [6, 36]\n            });\n            const middleLatLng = polyline.getLatLngs()[Math.floor(polyline.getLatLngs().length / 2)];\n            const latLngString = middleLatLng.toString();\n            const latLngArray = latLngString.replace(/[^\\d.,-]/g, '').split(',');\n            const Lat = parseFloat(latLngArray[0]);\n            const Lng = parseFloat(latLngArray[1]);\n            L.marker({\n              lat: Lat,\n              lng: Lng\n            }, {\n              icon: planeIcon\n            }).addTo(this.planes);\n          }, error => {\n            console.error(`Error fetching coordinates for ${city.arrival}:`, error);\n          });\n        }, error => {\n          console.error(`Error fetching coordinates for ${city.departure}:`, error);\n        });\n      });\n    }\n  }\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.MapService));\n  };\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"app-map\"]],\n    decls: 20,\n    vars: 1,\n    consts: [[\"id\", \"map\"], [1, \"search-popup\"], [1, \"input-container\"], [\"for\", \"departureCity\"], [\"id\", \"departureCity\", \"type\", \"text\", \"placeholder\", \"Enter departure city\"], [\"for\", \"arrivalCity\"], [\"id\", \"arrivalCity\", \"type\", \"text\", \"placeholder\", \"Enter arrival city\"], [1, \"button-container\"], [1, \"search-button\", 3, \"click\"], [1, \"fas\", \"fa-search\"], [\"id\", \"clean-button\", 1, \"clean-button\", 2, \"background-color\", \"grey\", 3, \"click\"], [4, \"ngIf\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"head\")(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"h3\");\n        i0.ɵɵtext(4, \"Find Your Desired Trip Route\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"label\", 3);\n        i0.ɵɵtext(7, \"Departure City\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 5);\n        i0.ɵɵtext(11, \"Arrival City\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_14_listener() {\n          return ctx.onSearchClick();\n        });\n        i0.ɵɵelement(15, \"i\", 9);\n        i0.ɵɵtext(16, \" Search \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_17_listener() {\n          return ctx.onCleanSearchClick();\n        });\n        i0.ɵɵtext(18, \" Clean Search \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(19, MapComponent_div_19_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngIf\", ctx.totalPrice !== 0);\n      }\n    },\n    directives: [i2.NgIf],\n    styles: [\"#map[_ngcontent-%COMP%]{height:90vh;width:145%;margin:0;padding:0;position:relative;left:-31vh;border:2px solid #3498db;border-radius:10px}body[_ngcontent-%COMP%]{margin:0;padding:0;background:none}.leaflet-control[_ngcontent-%COMP%]{background-color:#fffc;border-radius:5px;box-shadow:0 0 10px #0003}.search-popup[_ngcontent-%COMP%]{position:absolute;top:100px;left:100px;background:white;padding:15px;border-radius:10px;box-shadow:0 4px 8px #0000001a;z-index:1000}.search-popup[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-top:0;font-size:18px}.input-container[_ngcontent-%COMP%]{margin-bottom:10px}.input-container[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;font-weight:700;margin-bottom:5px}.input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;padding:8px;border:1px solid #ccc;border-radius:5px}.search-popup[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;width:100%;padding:10px;background:#2980b9;color:#fff;border:none;border-radius:5px;cursor:pointer;font-size:16px}.search-popup[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:5px}.search-popup[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background:#1a5276}.button-container[_ngcontent-%COMP%]{display:flex;gap:10px}button[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:5px}#clean-button[_ngcontent-%COMP%]:hover{background-color:#a9a9a9!important}\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}